"""Base classes for agents and MCP sessions."""

from typing import Annotated, Any, Dict, Optional

import httpx
from a2a.server.agent_execution import AgentExecutor
from a2a.server.agent_execution.context import RequestContext
from a2a.server.events.event_queue import EventQueue
from a2a.types import AgentCard, Message
from pydantic import Field, HttpUrl

from api.src.pydantic import ConfiguredBaseModel

# region MCP Session


class BaseHttpMcpSession(ConfiguredBaseModel):
    """Base class for HTTP MCP sessions."""

    url: Annotated[HttpUrl, Field(description="The URL of the MCP server")]
    session_id: Annotated[
        Optional[str], Field(default=None, description="Session ID for the MCP server")
    ]

    async def initialize(self) -> None:
        """Initialize the MCP session by sending an initialize request."""
        payload = {"jsonrpc": "2.0", "id": 1, "method": "initialize", "params": {}}

        async with httpx.AsyncClient() as client:
            resp = client.post(self.url, json=payload)
            resp.raise_for_status()

        self.session_id = resp.headers["Mcp-Session-Id"]

    async def call_tool(self, name: str, tool_args: Dict[str, Any]) -> Any:
        """Call a remote tool via JSON-RPC.

        Args:
            name (str): The name of the tool to call.
            tool_args (Dict[str, Any]): The input parameters to pass to the tool.

        Returns:
            Any: The result returned by the remote tool.

        Raises:
            RuntimeError: If the session is not initialized.
            httpx.HTTPStatusError: If the HTTP request fails.

        """
        if not self.session_id:
            raise RuntimeError("Session not initialized")
        payload = {
            "jsonrpc": "2.0",
            "id": 2,
            "method": "call_tool",
            "params": {"name": name, "input": tool_args},
        }

        async with httpx.AsyncClient() as client:
            resp = client.post(self.url, json=payload)
            resp.raise_for_status()

        result = resp.json().get("result")
        return result


# endregion MCP Session

# region Base Agent


class BaseAgent(ConfiguredBaseModel, AgentExecutor, AgentCard):
    """Base class for agents."""

    id: Annotated[str, Field(description="Unique identifier for the agent")]
    instructions: Annotated[
        str, Field(description="Instructions for the agent to follow")
    ]
    model: Annotated[str, Field(description="The model name to use for the agent")]

    async def invoke(self, context: RequestContext) -> Message:
        """Invoke the agent with the given request context.

        Args:
            context (RequestContext): The context of the request to process.

        Returns:
            Message: The response message generated by the agent.

        Raises:
            NotImplementedError: If the method is not implemented by a subclass.

        """
        raise NotImplementedError(
            "The invoke method must be implemented by subclasses of BaseAgent."
        )

    async def execute(self, context: RequestContext, event_queue: EventQueue):
        """Execute the agent's main logic using the provided context, then enqueues the result as an event.

        Args:
            context (RequestContext): The context for the current request, containing relevant data
                and metadata.
            event_queue (EventQueue): The event queue where the result of the execution will be
                enqueued.

        Returns:
            None

        Raises:
            Any exceptions raised by the `invoke` method.

        """
        result = await self.invoke(context=context)
        event_queue.enqueue_event(result)

    async def cancel(self, context: RequestContext, event_queue: EventQueue):
        """Cancel the current operation for the agent.

        Args:
            context (RequestContext): The context of the current request.
            event_queue (EventQueue): The event queue to which cancellation events may be posted.

        Raises:
            NotImplementedError: This method must be implemented by subclasses.

        """
        raise NotImplementedError(
            "The cancel method must be implemented by subclasses of BaseAgent."
        )


class McpMixin(ConfiguredBaseModel):
    """Mixin for agents that use an MCP session for tool calls."""

    session: Annotated[
        BaseHttpMcpSession,
        Field(description="The MCP session to use for tool calls"),
    ]
    allowed_tools: Annotated[
        set[str], Field(description="Set of allowed tool names for this agent")
    ]


# endregion Base Agent
