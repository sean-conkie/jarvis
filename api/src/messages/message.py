"""Message data classes for chat completions."""

from typing import Literal, Optional

from pydantic import BaseModel, Field

from api.src.messages.create import ChatCompletionMessageParam, create_message


class Audio(BaseModel):
    """Data about a previous audio response from the model."""

    id: str
    """Unique identifier for a previous audio response from the model."""


class Function(BaseModel):
    """A function to call."""

    arguments: str
    """
    The arguments to call the function with, as generated by the model in JSON
    format. Note that the model does not always generate valid JSON, and may
    hallucinate parameters not defined by your function schema. Validate the
    arguments in your code before calling your function.
    """

    name: str
    """The name of the function to call."""


class ToolCall(BaseModel):
    """A tool call to apply to the search."""

    id: str
    """The ID of the tool call."""

    function: Function
    """The function that the model called."""

    type: Literal["function"]
    """The type of the tool. Currently, only `function` is supported."""


class ChatMessage(BaseModel):
    """A chat completion."""

    content: Optional[str] = None
    """The contents of the system message."""

    role: Literal["system", "user", "assistant", "tool", "function"]
    """The role of the messages author."""

    name: Optional[str] = None
    """An optional name for the participant.

    Provides the model information to differentiate between participants of the same
    role.
    """

    audio: Optional[Audio] = None
    """Data about a previous audio response from the model.

    [Learn more](https://platform.openai.com/docs/guides/audio).
    """

    refusal: Optional[str] = None
    """The refusal message by the assistant."""

    toolCalls: Optional[list[ToolCall]] = Field(None, alias="tool_calls")  # noqa: N815
    """The tool calls generated by the model, such as function calls."""

    toolCallId: Optional[str] = Field(None, alias="tool_call_id")  # noqa: N815
    """Tool call that this message is responding to."""

    @property
    def as_type(self) -> ChatCompletionMessageParam:
        """Get the message content as ChatCompletionMessageParam."""
        return create_message(**self.model_dump(by_alias=True))
